# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Search >> The search bar should be displayed as sticky on Resort details page for Walking holidays @inw
- Location: /home/runner/work/quality/quality/tests/e2e_tests/inw_tests/components/resortPage.spec.ts:23:13

# Error details

```
Error: locator.waitFor: Test ended.
Call log:
  - waiting for locator('.c-search-card__footer .c-search-card--resorts-footer').getByRole('button', { name: 'View details' }).first() to be visible

    at ResortPage.checkResortSearchBarAvailability (/home/runner/work/quality/quality/tests/resources/inw_resources/page_objects/resort_page.ts:80:44)
    at /home/runner/work/quality/quality/tests/e2e_tests/inw_tests/components/resortPage.spec.ts:38:44
    at /home/runner/work/quality/quality/tests/e2e_tests/inw_tests/components/resortPage.spec.ts:36:24
```

# Test source

```ts
   1 | import { type Page, type Locator, expect, APIRequestContext, APIResponse } from '@playwright/test';
   2 | import { SearchValues, ResortSearchValues } from '../utilities/models';
   3 | import environmentBaseUrl from '../../utils/environmentBaseUrl';
   4 |
   5 | export class ResortPage {
   6 |     public page: Page
   7 |     readonly viewHotelsButtons: Locator
   8 |     readonly searchBar: Locator
   9 |     readonly criteriaBar: Locator
   10 |     readonly resortSearchBarDetails: Locator
   11 |     readonly editSearchBar: Locator
   12 |     readonly northEnglandCheckbox: Locator
   13 |     readonly departureBtn: Locator
   14 |     readonly whosComingBtn: Locator
   15 |     readonly addAdultBtn: Locator
   16 |     readonly addChildBtn: Locator
   17 |     readonly childOption: Locator
   18 |     readonly durationBtn: Locator
   19 |     readonly durationSampleVal: Locator
   20 |     readonly departureDate: Locator
   21 |     readonly departureDateVal: Locator
   22 |     readonly doneBtn: Locator
   23 |     readonly confirmDetailsBtn: Locator
   24 |     readonly resortSearchDepartureVal: Locator
   25 |     readonly resortSearchArrivalValue: Locator
   26 |     readonly resortSearchWhosComingValue: Locator
   27 |     readonly resortSearchNightsValue: Locator
   28 |     readonly flexibleDateLink: Locator
   29 |     readonly flexibleDateOption: Locator
   30 |     readonly resortPriceValue: Locator
   31 |     readonly resortPriceValueWithoutPromo: Locator
   32 |     public resortSearchBarValues: string[] = [];
   33 |     public resortSearchValues: ResortSearchValues | null = null;
   34 |     public sphinxUrl: string | null = environmentBaseUrl.sphinx.dev;
   35 |     private request: APIRequestContext;
   36 |
   37 |
   38 |     constructor(page: Page, apiContext: APIRequestContext) {
   39 |         this.page = page;
   40 |         this.request = apiContext
   41 |         this.viewHotelsButtons = page.locator('.c-search-card__footer .c-search-card--resorts-footer').getByRole('button', { name: 'View details' })
   42 |         this.searchBar = page.locator('.c-search-criteria-bar')
   43 |         this.criteriaBar = page.locator('[data-sticky-content="criteriabar"]')
   44 |         this.resortSearchBarDetails = page.locator('.c-search-criteria-bar__price-basis > span')
   45 |         this.editSearchBar = page.locator('.c-search-criteria-bar').getByRole('button', { name: 'Edit' })
   46 |         this.departureBtn = page.getByRole('button', { name: 'Departure location(s) Any' })
   47 |         this.northEnglandCheckbox = this.page.getByText('Any North Of England').or(
   48 |             this.page.locator('div:has-text("Any North Of England")')
   49 |         ).or(
   50 |             this.page.locator('generic:has-text("Any North Of England")')
   51 |         )
   52 |         this.whosComingBtn = page.getByRole('button', { name: `Who's coming?` })
   53 |         this.addAdultBtn = page.locator('.number-range').getByRole('button', { name: '+' })
   54 |         this.addChildBtn = page.getByRole('button', { name: 'Add a child' })
   55 |         this.childOption = page.locator('//*[@id="childSelectList"] //li').nth(1)
   56 |         this.durationBtn = page.locator('.nights-btn')
   57 |         this.durationSampleVal = this.page.getByRole('radio', { name: '3 nights' }).or(
   58 |             this.page.getByText('3 nights').filter({ has: this.page.locator('radio') })
   59 |         ).or(
   60 |             this.page.locator('label:has-text("3 nights")')
   61 |         )
   62 |         this.departureDate = page.getByRole('button', { name: 'Select date' })
   63 |         this.departureDateVal = page.locator('.calendar-btn')
   64 |         this.doneBtn = page.getByRole('button', { name: 'Done' })
   65 |         this.confirmDetailsBtn = page.getByRole('button', { name: ' Confirm details ' })
   66 |         this.resortSearchDepartureVal = page.locator('.trip-search__option .option--selected')
   67 |         this.resortSearchNightsValue = page.getByRole('button', { name: 'nights' })
   68 |         this.flexibleDateLink = page.getByRole('link', { name: 'Flexible dates' })
   69 |         this.flexibleDateOption = page.locator('.exactdate-list >li').nth(1)
   70 |         this.resortPriceValue = page.locator('.c-search-criteria-bar__price-promo >div >span').nth(1)
   71 |         this.resortPriceValueWithoutPromo = page.locator('.c-search-criteria-bar__price >span').nth(1)
   72 |     }
   73 |
   74 |     async checkResortSearchBarAvailability() {
   75 |         let hasStickyFixedClass: boolean = false
   76 |         let positionStyle: string = ''
   77 |
   78 |         const [newPage] = await Promise.all([
   79 |             this.page.context().waitForEvent('page'),
>  80 |             this.viewHotelsButtons.first().waitFor({ state: 'visible' }),
      |                                            ^ Error: locator.waitFor: Test ended.
   81 |             this.viewHotelsButtons.first().click()
   82 |         ]);
   83 |         
   84 |         await newPage.waitForLoadState('domcontentloaded')
   85 |         try {
   86 |             await newPage.waitForLoadState('networkidle', { timeout: 20000 });
   87 |         } catch (error) {
   88 |             console.log('Network idle timeout, but proceeding with test...');
   89 |             // Continue with a short wait instead
   90 |             await newPage.waitForTimeout(3000);
   91 |         }
   92 |         this.page = newPage
   93 |
   94 |         // Wait for the search criteria bar with increased timeout and better error handling
   95 |         try {
   96 |             await expect(newPage.locator('.c-search-criteria-bar'), 'Search bar is available').toBeVisible({ timeout: 20000 });
   97 |         } catch (error) {
   98 |             console.log('Search criteria bar not found, trying alternative selector...');
   99 |             await expect(newPage.locator('[data-sticky-content="criteriabar"]'), 'Alternative search bar selector').toBeVisible({ timeout: 10000 });
  100 |         }
  101 |         
  102 |         // Additional wait for page stability
  103 |         await newPage.waitForTimeout(2000);
  104 |         
  105 |         hasStickyFixedClass = await newPage.locator('[data-sticky-content="criteriabar"]').evaluate((element: HTMLElement) =>
  106 |             element.classList.contains('sticky-fixed')
  107 |         );
  108 |
  109 |         positionStyle = await newPage.locator('[data-sticky-content="criteriabar"]').evaluate((element: HTMLElement) =>
  110 |             window.getComputedStyle(element).position
  111 |         );
  112 |
  113 |         expect(hasStickyFixedClass, 'Search bar is not initially sticky').toBe(false)
  114 |         expect(positionStyle).toBe('relative')
  115 |
  116 |         return newPage
  117 |     }
  118 |
  119 |     async scrollDown(newPage) {
  120 |         const resortPage = new ResortPage(newPage, this.request);
  121 |         await newPage.waitForLoadState('domcontentloaded')
  122 |
  123 |         await newPage.evaluate(() => window.scrollBy(0, 300));
  124 |         await newPage.waitForTimeout(500);
  125 |     }
  126 |
  127 |     async validateSearchBarTobeSticky(newPage) {
  128 |         const resortPage = new ResortPage(newPage, this.request);
  129 |         await newPage.waitForLoadState('domcontentloaded')
  130 |
  131 |         await expect(resortPage.searchBar, 'Search bar is available').toBeVisible();
  132 |
  133 |         const hasStickyFixedClass = await resortPage.criteriaBar.evaluate((element: HTMLElement) =>
  134 |             element.classList.contains('sticky-fixed')
  135 |         );
  136 |
  137 |         const positionStyle = await resortPage.criteriaBar.evaluate((element: HTMLElement) =>
  138 |             window.getComputedStyle(element).position
  139 |         );
  140 |
  141 |         const top = await resortPage.criteriaBar.evaluate((element: HTMLElement) =>
  142 |             window.getComputedStyle(element).top
  143 |         );
  144 |
  145 |         expect(hasStickyFixedClass, 'Search bar is sticky').toBe(true)
  146 |         expect(positionStyle).toBe('fixed')
  147 |         expect(top).toBe('0px')
  148 |     }
  149 |
  150 |     async validateResortSearchBarDetails(searchValues: SearchValues, newPage: Page, updatedVal: boolean = false) {
  151 |         const resortPage = new ResortPage(newPage, this.request);
  152 |         await newPage.waitForLoadState('domcontentloaded')
  153 |         await newPage.waitForTimeout(2000);
  154 |
  155 |         // Clear previous values to avoid stale data
  156 |         this.resortSearchBarValues = [];
  157 |
  158 |         for (let index = 0; index < 3; index++) {
  159 |             try {
  160 |                 await resortPage.resortSearchBarDetails.nth(index).waitFor({ state: 'visible', timeout: 10000 });
  161 |                 let resortSearchBarDetails = await resortPage.resortSearchBarDetails.nth(index).textContent()
  162 |                 if (resortSearchBarDetails !== null) {
  163 |                     this.resortSearchBarValues.push(resortSearchBarDetails);
  164 |                 }
  165 |             } catch (error) {
  166 |                 console.log(`Failed to get search bar detail at index ${index}:`, error.message);
  167 |                 // Continue with other elements
  168 |             }
  169 |         }
  170 |
  171 |         if (this.resortSearchBarValues.length === 0) {
  172 |             throw new Error('No search bar details could be retrieved');
  173 |         }
  174 |
  175 |         if (updatedVal) {
  176 |             const expectedValues = this.resortSearchValues;
  177 |             const actualBarValues = this.resortSearchBarValues.map(v => v.trim().toLowerCase());
  178 |
  179 |             // Format expected values to match how they appear in the bar
  180 |             const expectedFormatted = [
```